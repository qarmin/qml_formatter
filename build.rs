use std::env;
use std::ffi::OsStr;
use std::fs::{read_dir, File};
use std::io::Write;
use std::path::Path;

fn main() {
    let out_dir = env::var("OUT_DIR").unwrap();
    let out_dir = Path::new(&out_dir);
    println!("Writing tests to: {:?}", out_dir);
    write_conversion_tests(out_dir);
}

fn write_conversion_tests(path: &Path) {
    let destination = path.join("test_conversion.rs");
    let mut test_file = File::create(&destination).unwrap();

    // write test file header, put `use`, `const` etc there
    write!(
        test_file,
        r#"// THIS FILE IS AUTOGENERATED - DO NOT EDIT!
use crate::convert_file;
use std::fs::read_to_string;
"#
    )
    .unwrap();

    let test_data_files = read_dir("./src/test_data").unwrap();
    for entry in test_data_files {
        let input_filepath = entry.unwrap().path().canonicalize().unwrap();
        let input_filename = input_filepath.file_name().filter(|_| input_filepath.is_file()).and_then(OsStr::to_str);
        if input_filename.map(|name| !name.ends_with("_INPUT.qml")).unwrap_or(true) {
            continue;
        }

        let test_name = input_filename.and_then(|name| name.strip_suffix("_INPUT.qml")).unwrap();
        let output_filepath = input_filepath.with_file_name(format!("{}_OUTPUT.qml", test_name));

        write!(
            test_file,
            r#"
            #[test]
            fn test_{test_name}() {{
                let input_content = read_to_string("{input_file}").unwrap();
                let output_content = read_to_string("{output_file}").unwrap();
                let result_content = convert_file(input_content);
                assert_eq!(result_content, output_content);
            }}
            "#,
            test_name = test_name,
            input_file = input_filepath.to_str().unwrap(),
            output_file = output_filepath.to_str().unwrap(),
        )
        .unwrap();
    }
}
